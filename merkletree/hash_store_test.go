package merkletree

import (
	"bytes"
	"testing"

	"github.com/mileschao/echain/common"
)

func TestFileHashStorage(t *testing.T) {
	hs, err := NewFileHashStorage("hftest.hs", 0)
	if err != nil {
		t.Errorf("new file hash storage: %s", err)
	}
	var u2560 = common.Uint256{
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF,
		0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE,
		0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD,
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFD, 0xFD}
	var u2561 = common.Uint256{
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF,
		0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE,
		0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD,
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFD, 0xFE}
	var u2562 = common.Uint256{
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF,
		0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE,
		0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD,
		0xFE, 0xFF, 0xFD, 0xFE, 0xFF, 0xFD, 0xFD, 0xFF}
	var hashes = []common.Uint256{u2560, u2561, u2562}
	if err := hs.Append(hashes); err != nil {
		t.Errorf("hash storage append: %s", err)
	}
	if err := hs.Flush(); err != nil {
		t.Errorf("hash storage flush: %s", err)
	}
	u0, err := hs.GetHash(0)
	if err != nil || !bytes.Equal(u0[:], u2560[:]) {
		t.Errorf("hash storage gethash: %d, %s, %X", 0, err, u0[:])
	}
	u1, err := hs.GetHash(1)
	if err != nil || !bytes.Equal(u1[:], u2561[:]) {
		t.Errorf("hash storage gethash: %d, %s, %X", 1, err, u1[:])
	}
	u2, err := hs.GetHash(2)
	if err != nil || !bytes.Equal(u2[:], u2562[:]) {
		t.Errorf("hash storage gethash: %d, %s, %X", 2, err, u2[:])
	}
}
